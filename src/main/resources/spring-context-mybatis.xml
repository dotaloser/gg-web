<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/aop 	http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:application.properties" />

	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.dota.gg">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- c3p0数据连接池 -->
	<bean id="c3p0DataSource" name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 指定连接数据库的驱动-->
	    <property name="driverClass" value="${jdbc.driver}"/>
	    <!-- 指定连接数据库的URL-->
	    <property name="jdbcUrl" value="${jdbc.url}"/>
	    <!-- 指定连接数据库的用户名-->
	    <property name="user" value="${jdbc.username}"/>
	    <!-- 指定连接数据库的密码-->
	    <property name="password" value="${jdbc.password}"/>
	    <!-- 指定连接池中保留的最大连接数. Default:15-->
	    <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
	    <!-- 指定连接池中保留的最小连接数-->
	    <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
	    <!-- 指定连接池的初始化连接数  取值应在minPoolSize 与 maxPoolSize 之间.Default:3-->
	    <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
	    <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0-->
	    <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
	    <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3-->
	    <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
	    <!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。
	    但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0-->
	    <property name="maxStatements" value="${jdbc.maxStatements}"/>
	    <!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
	    <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="c3p0DataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:/maps/**/*.xml" />
	</bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.dota.gg" />
    </bean>
    
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>    
    
    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
</beans>